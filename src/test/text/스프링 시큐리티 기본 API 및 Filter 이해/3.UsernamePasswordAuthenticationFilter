* UsernamePasswordAuthenticationFilter
    - 실직적으로 사용자가 로그인할때 인증처리를 담당하고 요청을 처리하는 필터이다.
      내부적으로 여러 클래스를 사용하여 인증을 처리하게 된다.

      UsernamePasswordAuthenticationFilter
                    ↓ 요청 정보가 매칭되는지 확인
      AntPathRequestMatcher(/login)   → (NO) chain.doFilter
                    ↓ (YES)
              Authentication
           (Username + Password)
                    ↓ 인증                                                                    ↑ (UsernamePasswordAuthenticationFilter 로 돌아감)
           AuthenticationManager    →  (위임) AuthenticationProvider   → (인증실패)  AuthenticationException
           AuthenticationManager    ←(인증성공)AuthenticationProvider
                    ↓
              Authentication
           (User + Authorities)
                    ↓
           SecurityContext 에 저장
                    ↓
             SuccessHandler


      - UsernamePasswordAuthenticationFilter -> AntPathRequestMatcher(/login)
        로그인 url 이 맞는지 확인하는 단계이다 default 는 /login 이다.
        loginProcessingUrl("/login_proc") 로 default url 변경가능

      - AntPathRequestMatcher(/login) -> chain.doFilter
        매칭이 되지 않을시 이곳으로 이동

      - Authentication (Username + Password)
        Authentication 객체를 만들어서 객체안에 사용자가 입력한 정보를 저장해서
        AuthenticationManager 에게 인증처리를 맡기는 역할을 한다.
        =================여기까지가 필터의 역할============================

      - AuthenticationManager
        Authentication (Username + Password) 로 부터 사용자정보다 담긴 객체를 받아 인증처리를 하게되는데
        내부적으로 AuthenticationProvider 클래스 타입의 객체들을 가지고있고 이 객체에게 인증처리를 위임한다.
        AuthenticationProvider 의 객체에서 인증 실패와 성공을 판가름해준다. 만약 실패라면 UsernamePasswordAuthenticationFilter
        로 보내서 후속작업(예외처리에 대한 작업)을 진행하고, 성공한다면 Authentication 객체를 만들어 user 객체의 정보와 권한 정보를 그
        안에 저장해주고 AuthenticationManager 에게 다시 리턴해줍니다.
        ============인증 성공시 필터에게 다시 역할을 넘긴다====================

      - Authentication
        AuthenticationManager 안에서 내부적으로 인증과정을 거쳐 인증이 성공했을때에 다시 Authentication 가 그 객체를
        전달받는다. (user 정보가 담긴 객체 + Authorities 권한 정보가 담긴 객체)

      - SecurityContext
        SecurityContext 에 Authentication 가 넘겨준 객체를 저장한다.
        SecurityContext 는 인증객체를 저장하고 보관하는 저장소이다.
        나중에는 이 객체가 Session 에 저장된다.

      - SuccessHandler
        성공 이후의 작업들을 처리한다.

            - 요약)
                필터가 모든 일을 처리하다가 Manager 에게 잠시 일을 위임하고
                문제가 없다면 Manager 가 전달해준 인증객체를 받아 SecurityContext 에 보관하고
                성공 response 를 던져준다.



      * 알고가야 할 것
      - FilterChainProxy.java
            = 필터들을 관리하는 Bean 이다.
              약 14개의 필터들이 있는데 각각의 필터들은 스프링 Security 가 초기화되며 생성된다.
              또한 우리가 SecurityConfig 에서 설정한 내용을 토대로도 생성이 된다.

            = 사용자의 요청을 가장먼저 받고 각각의 필터들을 호출하면서
              인증 또는 인가처리를 진행한다.
